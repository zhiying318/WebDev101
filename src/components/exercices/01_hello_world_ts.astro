<section id="01_hello_world_ts" class="exercise-section">
    <h2>01 Hello World TypeScript</h2>
    <p>Exercice : Le typage dans TypeScript</p>
  
    <article class="markdown-answer">
    <!-- <h3>Comparaison entre <code>hello.js</code> et <code>hello.ts</code></h3> -->
    <!-- <p>Le fichier <code>hello.ts</code> peut contenir du code typé TypeScript comme :</p> -->
  
    <!-- <pre><code class="language-ts" is:raw>
  function greet(name: string): string {
    return `Hello, ${name}!`;
  }
  console.log(greet("Alice"));
    </code></pre>
  
    <p>Une fois transpilé, le fichier <code>hello.js</code> généré ressemblera à :</p>
  
    <pre><code class="language-js" is:raw>
  function greet(name) {
    return "Hello, " + name + "!";
  }
  console.log(greet("Alice"));
    </code></pre> -->
  
    <h4>Déduction de l'étape de transpilation</h4>
    <p>La transpilation permet de convertir du code TypeScript en JavaScript standard, compatible avec tous les navigateurs. Toutes les annotations de types sont supprimées et seule la logique JavaScript reste.</p>
  
    <h4>Utilité du typage fort dans TypeScript</h4>
    <ul>
      <li> Détecter les erreurs à la compilation plutôt qu'à l'exécution</li>
      <li> Rendre le code plus lisible et auto-documenté</li>
      <li> Aider à l'autocomplétion et la navigation dans l'IDE</li>
      <li> Faciliter la maintenance et le refactoring à grande échelle</li>
    </ul>
  
    <p>Le typage fort dans TypeScript apporte donc plus de robustesse et de sécurité au développement, contrairement à JavaScript qui est faiblement typé et dynamique.</p>
    </article>
  </section>
  