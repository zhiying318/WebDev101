---
const base = import.meta.env.BASE_URL;
---

<section id="16_http_crud" class="exercise-section">
  <h2>16 - HTTP CRUD avec relations entre entit√©s</h2>
  <p>Ce script g√®re la suppression, cr√©ation, mise √† jour de restaurants et la mise √† jour des cat√©gories et relations associ√©es.</p>

  <details>
  <summary>Afficher le code</summary>
  <pre><code class="language-ts" is:raw>
interface AlloResto {
  restaurants: Restaurant[];
  categories: Category[];
  restaurantCategories: RestaurantCategory[];
}

interface Category {
  id?: string;
  name?: string;
  restaurantIds?: string[];
}

interface RestaurantCategory {
  restaurantId?: string;
  categoryId?: string;
}

interface Restaurant {
  id?: string;
  name?: string;
  description?: string;
  categoryIds?: string[];
}

abstract class HttpClient<T> {
    protected url: string;
    protected options: RequestInit;
  
    constructor(url: string) {
      this.url = url;
      this.options = {
        headers: {
          "Content-Type": "application/json",
        },
      };
    }
  
    public async execute(): Promise<T | void> {
      try {
        const response = await fetch(this.url, this.options);
        if (response.ok) {
        const data: T = await response.json(); //extraction du corps de la r√©ponse au format JSON
        return data;
        }
      } catch (error) {
        console.error("There was a problem with the fetch operation: ", error);
      }
    }
  }


  class CreateClient<T> extends HttpClient<T> {
    constructor(url: string, data: T) {
      super(url);
      this.options.method = "POST";
      this.options.body = JSON.stringify(data);
    }
  }
  
  class ReadClient<T> extends HttpClient<T> {
    constructor(url: string) {
      super(url);
      this.options.method = "GET";
    }
  }
  
  class UpdateClient<T> extends HttpClient<T> {
    constructor(url: string, data: T) {
      super(url);
      this.options.method = "PATCH";
      this.options.body = JSON.stringify(data);
    }
  }
  
  class DeleteClient<T> extends HttpClient<T> {
    constructor(url: string) {
      super(url);
      this.options.method = "DELETE";
    }
  }
  const url = "http://localhost:3000/restaurants";
  const categoriesUrl = "http://localhost:3000/categories";
  const restaurantCategoriesUrl = "http://localhost:3000/restaurantCategories";

  async function deleteRestaurantAndUpdateRelations(restaurantId: string): Promise<void> {
    const getClient = new ReadClient<Restaurant>(`${url}/${restaurantId}`);
    const restaurant = await getClient.execute();
    if (!restaurant) return;
  
    const deleteClient = new DeleteClient<Restaurant>(`${url}/${restaurantId}`);
    const deletedRestaurant = await deleteClient.execute();
    if (!deletedRestaurant) return;
  
    console.log(`DELETE id : ${deletedRestaurant.id} name : ${deletedRestaurant.name} `);

    const categoryIds = restaurant.categoryIds || [];
    for (const categoryId of categoryIds) {
      const getCategoryClient = new ReadClient<Category>(`${categoriesUrl}/${categoryId}`);
      const category = await getCategoryClient.execute();
      if (category) {
        const updatedRestaurantIds = category.restaurantIds?.filter(id => id !== restaurantId) || [];
        const updateCategoryClient = new UpdateClient<Category>(`${categoriesUrl}/${categoryId}`, {
          restaurantIds: updatedRestaurantIds
        });
        await updateCategoryClient.execute();
      }
    }
  
    const deleteRestaurantCategoriesClient = new DeleteClient(`${restaurantCategoriesUrl}?restaurantId=${restaurantId}`);
    await deleteRestaurantCategoriesClient.execute();
  }

  async function createRestaurantAndRelations(data: Restaurant): Promise<Restaurant | void> {
    const createClient = new CreateClient<Restaurant>(url, data);
    const createdRestaurant = await createClient.execute();
    if (createdRestaurant && createdRestaurant.id) {
      console.log(`CREATE id : ${createdRestaurant.id} name : ${createdRestaurant.name} `);
  
      const categoryIds = data.categoryIds || [];
      for (const categoryId of categoryIds) {
        const getCategoryClient = new ReadClient<Category>(`${categoriesUrl}/${categoryId}`);
        const category = await getCategoryClient.execute();
        if (category) {
          const updatedRestaurantIds = [...(category.restaurantIds || []), createdRestaurant.id];
          const updateCategoryClient = new UpdateClient<Category>(`${categoriesUrl}/${categoryId}`, {
            restaurantIds: updatedRestaurantIds
          });
          await updateCategoryClient.execute();

          const createRestaurantCategoryClient = new CreateClient<RestaurantCategory>(restaurantCategoriesUrl, {
            restaurantId: createdRestaurant.id,
            categoryId: categoryId
          });
          await createRestaurantCategoryClient.execute();
        }
      }
      return createdRestaurant;
    }
  }
  
  async function updateRestaurantAndRelations(restaurantId: string, updatedData: Restaurant): Promise<Restaurant | void> {
    const getClient = new ReadClient<Restaurant>(`${url}/${restaurantId}`);
    const originalRestaurant = await getClient.execute();
    if (!originalRestaurant) return;
  
    const updateClient = new UpdateClient<Restaurant>(`${url}/${restaurantId}`, updatedData);
    const updatedRestaurant = await updateClient.execute();
    if (!updatedRestaurant) return;
  
    console.log(`UPDATE id : ${updatedRestaurant.id} name : ${updatedRestaurant.name} `);
  
    if (updatedData.categoryIds !== undefined) {
      const originalCategoryIds = originalRestaurant.categoryIds || [];
      const newCategoryIds = updatedData.categoryIds || [];
      const addedIds = newCategoryIds.filter(id => !originalCategoryIds.includes(id));
      const removedIds = originalCategoryIds.filter(id => !newCategoryIds.includes(id));
  
      for (const categoryId of addedIds) {
        const getCategoryClient = new ReadClient<Category>(`${categoriesUrl}/${categoryId}`);
        const category = await getCategoryClient.execute();
        if (category) {
          const updatedRestaurantIds = [...(category.restaurantIds || []), restaurantId];
          const updateCategoryClient = new UpdateClient<Category>(`${categoriesUrl}/${categoryId}`, {
            restaurantIds: updatedRestaurantIds
          });
          await updateCategoryClient.execute();
  
          const createRestaurantCategoryClient = new CreateClient<RestaurantCategory>(restaurantCategoriesUrl, {
            restaurantId: restaurantId,
            categoryId: categoryId
          });
          await createRestaurantCategoryClient.execute();
        }
      }

      for (const categoryId of removedIds) {
        const getCategoryClient = new ReadClient<Category>(`${categoriesUrl}/${categoryId}`);
        const category = await getCategoryClient.execute();
        if (category) {
          const updatedRestaurantIds = category.restaurantIds?.filter(id => id !== restaurantId) || [];
          const updateCategoryClient = new UpdateClient<Category>(`${categoriesUrl}/${categoryId}`, {
            restaurantIds: updatedRestaurantIds
          });
          await updateCategoryClient.execute();
  
          const deleteRestaurantCategoryClient = new DeleteClient(`${restaurantCategoriesUrl}?restaurantId=${restaurantId}&categoryId=${categoryId}`);
          await deleteRestaurantCategoryClient.execute();
        }
      }
    }
  
    return updatedRestaurant;
  }


// Exemple d'ex√©cution : suppression, cr√©ation, modification
async function main() {
  // suppression
  await deleteRestaurantAndUpdateRelations('3aa8');
  // cr√©ation
  await createRestaurantAndRelations({
    name: "Le Restaurant de la Joie",
    description: "Un restaurant o√π la joie est au menu",
    categoryIds: ["71b2"],
  });
  // mise √† jour
  await updateRestaurantAndRelations('12b3', {
    name: "Le Grill Super Marrant",
  });
}
  </code></pre>
</details>

  <!-- <button id="btn16">Run</button> -->
  <div id="res16" class="result-box"></div>

  <!-- <script type="module" is:inline>
    import("/WebDev101/exercices/16_http_crud/app.js").then(({ main }) => {
      const resBox = document.getElementById('res16');
      document.getElementById("btn16")?.addEventListener("click", async () => {
        resBox.textContent = "En cours d'ex√©cution...";
        const originalLog = console.log;
        let logs = [];
        console.log = (...args) => {
          logs.push(args.join(" "));
          originalLog(...args);
        };

        try {
          await main();
          resBox.innerHTML = logs.map(line => `üìå ${line}`).join("<br>");
        } catch (e) {
          resBox.innerHTML = "‚ùå Erreur : " + e.message;
        } finally {
          console.log = originalLog;
        }
      });
    });
  </script> -->
</section>
